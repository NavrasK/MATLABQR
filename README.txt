QR Image Processing created by Navras Kamal for the EngCmp 100 Programming Contest of 2017

In order to test this program follow the following steps:
1) Extract this folder
2) Place the CONTENTS of the "IMAGES" (not the folder itself) into the C:\Users\~\Documents\MATLAB directory
3) Open the QRProcessing.m file in MATLAB
4) Run the program
5) Select the image to be used from the pop up menu
6) Visial output will be displayed in a figure window

PROCESS
 - Learn the file manipulation tools of Matlab
 - Learn the image tools of Matlab
 - Use the image tools to process an inputted file
 - Use the image tools to identify part of an image
 - Use the image tools to isolate part of an image

LIMITATIONS AND ASSUMPTIONS
 - Assume the image of the QR Code is oriented correctly
 - Assume the image of the QR Code is 2-Dimensional (no warping)
 - Assume the QR Code is either:
	>Black and white (pre isolated)
	>Coloured with two high contrast shades of the same colour (pre isolated)
	>Black and white with padding in a larger coloured image that doesn't contain areas of
		black and white greater than the area of the code
 - Assume each cell of the QR Code is a perfect square of pixels
 - Assume the source images are already saved into the appropriate directory (as described above)

TERMINOLOGY
	QR Code: A "Quick Response" matrix barcode meant to store data to be easily scanned by machines
	Cell: The black or white squares which make up the QR code
	Pixel: The individual units of data for the image

IMAGE COPYRIGHT INFO
	QR Codes generated by http://www.qr-code-generator.com/ and recoloured / edited by me
	QRtestC2 came from http://publicdomainarchive.com/
	QRtestC3-8 came from images taken by me. These works are licensed under a Creative Commons 
		Attribution-NonCommercial 4.0 International License. 
		[http://creativecommons.org/licenses/by-nc/4.0/]
	All images here are used for non-commercial educational purposes only.

BIBLIOGRAPHY AND ACKNOWLEDGEMENT
Code sources:
	"[sortedAreas, sortIndexes] = sort(allAreas, 'descend');" 
		Source: https://www.mathworks.com/matlabcentral/answers/75784-how-to-isolate-and-display-the-largest-connected-component

	"Inew = I.*M;" 
		Source: https://www.mathworks.com/matlabcentral/answers/38547-masking-out-image-area-using-binary-mask

	"M = repmat(all(I<20,3),[1 1 3]);" 
		Source: https://www.mathworks.com/matlabcentral/answers/9677-black-pixels-to-white

	"bb_i=ceil(bb(i).BoundingBox); 
	 idx_x=[bb_i(1)-2 bb_i(1)+bb_i(3)+2]; 
	 idx_y=[bb_i(2)-2 bb_i(2)+bb_i(4)+2];" 
		Source: https://www.mathworks.com/matlabcentral/answers/28158-how-to-crop-out-the-object-from-the-image-and-then-store-the-objects-in-the-image

	"[mA,nA] = size(A);
	 [mB,nB] = size(B);
	 F = zeros((mB-mA+1)*(nB-nA+1),2);
	 k = 0;
	 for p = 1:mB-mA+1
	  for q = 1:nB-nA+1
	   if all(all(A==B(p:p+mA-1,q:q+nA-1)))
	    k = k + 1;
 	   F(k,:) = [p,q];
 	   end
	  end
	 end
	 F(k+1:end,:) = [];"
		Source: https://www.mathworks.com/matlabcentral/newsreader/view_thread/316725

       "set(gcf, 'units','normalized','outerposition',[0 0 1 1]);"
       "label = bwlabel(imgMask, 8);
    	blobMeas = regionprops(label, imgMask, 'all'); 
    	blobNum = size(blobMeas, 1);
    	blobArea = zeros(1,blobNum);
    	for n = 1:blobNum
        	blobArea(n) = blobMeas(n).Area;
    	end
    	clabels = label2rgb (label, 'hsv', 'k', 'shuffle');
    	subplot(3, 3, 2);
    	imshow(clabels);"
		Source: http://www.mathworks.com/matlabcentral/fileexchange/25157-image-segmentation-tutorial

Information Sources:
	http://www.thonky.com/qr-code-tutorial/
	https://en.wikipedia.org/wiki/QR_code#Error_correction
	http://www.swisseduc.ch/informatik/theoretische_informatik/qr_codes/docs/qr_standard.pdf
	http://www.ams.org/samplings/feature-column/fc-2013-02
	http://blog.qartis.com/decoding-small-qr-codes-by-hand/
	https://www.youtube.com/watch?v=KA8hDldvfv0 